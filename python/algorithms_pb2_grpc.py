# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import algorithms_pb2 as algorithms__pb2


class AlgoServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.AddNums = channel.unary_unary(
                '/algo.AlgoService/AddNums',
                request_serializer=algorithms__pb2.AddNumsRequest.SerializeToString,
                response_deserializer=algorithms__pb2.AddNumsResponse.FromString,
                )
        self.ReverseString = channel.unary_unary(
                '/algo.AlgoService/ReverseString',
                request_serializer=algorithms__pb2.ReverseStringRequest.SerializeToString,
                response_deserializer=algorithms__pb2.ReverseStringResponse.FromString,
                )
        self.FindMax = channel.unary_unary(
                '/algo.AlgoService/FindMax',
                request_serializer=algorithms__pb2.FindMaxRequest.SerializeToString,
                response_deserializer=algorithms__pb2.FindMaxResponse.FromString,
                )


class AlgoServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def AddNums(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ReverseString(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def FindMax(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_AlgoServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'AddNums': grpc.unary_unary_rpc_method_handler(
                    servicer.AddNums,
                    request_deserializer=algorithms__pb2.AddNumsRequest.FromString,
                    response_serializer=algorithms__pb2.AddNumsResponse.SerializeToString,
            ),
            'ReverseString': grpc.unary_unary_rpc_method_handler(
                    servicer.ReverseString,
                    request_deserializer=algorithms__pb2.ReverseStringRequest.FromString,
                    response_serializer=algorithms__pb2.ReverseStringResponse.SerializeToString,
            ),
            'FindMax': grpc.unary_unary_rpc_method_handler(
                    servicer.FindMax,
                    request_deserializer=algorithms__pb2.FindMaxRequest.FromString,
                    response_serializer=algorithms__pb2.FindMaxResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'algo.AlgoService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class AlgoService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def AddNums(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/algo.AlgoService/AddNums',
            algorithms__pb2.AddNumsRequest.SerializeToString,
            algorithms__pb2.AddNumsResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ReverseString(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/algo.AlgoService/ReverseString',
            algorithms__pb2.ReverseStringRequest.SerializeToString,
            algorithms__pb2.ReverseStringResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def FindMax(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/algo.AlgoService/FindMax',
            algorithms__pb2.FindMaxRequest.SerializeToString,
            algorithms__pb2.FindMaxResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
